import { Injectable } from '@angular/core';
import { SupabaseService } from 'src/app/core/services/supabase.service';
import {AuthService} from "./auth.service";

export interface League {
  id?: number;       // Optional as it will be generated by the database
  name: string;
  user_id: string;   // Assuming user_id is a UUID type
  created_at?: Date; // Optional as it will be generated by the database
}

@Injectable({
  providedIn: 'root'
})
export class CreatefriendsleagueService {

  constructor(private supabase: SupabaseService,private authService: AuthService) {}

  async createLeague(league: League): Promise<number | undefined> {

    try {
      const { error: upsertError } = await this.supabase.supabaseClient
        .from('friendsleagues')
        .upsert([league]);

      if (upsertError) {
        console.error('Error creating league:', upsertError);
        throw upsertError;
      }

      // Assuming 'created_at' or similar timestamp field is available to order by
      const { data, error: fetchError } = await this.supabase.supabaseClient
        .from('friendsleagues')
        .select('*')
        .eq('user_id', league.user_id)
        .order('created_at', { ascending: false })
        .limit(1)
        .single();

      if (fetchError) {
        console.error('Error fetching league ID:', fetchError);
        throw fetchError;
      }

      console.log('League ID:', data?.id);

      return data?.id;
    } catch (error) {
      console.error('Error in createLeague:', error);
      throw error;
    }
  }

  async addUserToLeague(userId: string, leagueId: number , xp?: number): Promise<any> {
    // Create the object to upsert. xp is included only if it's provided.
    const record = xp !== undefined
      ? { userid: userId, leagueid: leagueId, xp: xp }
      : { userid: userId, leagueid: leagueId };

    const { data, error } = await this.supabase.supabaseClient
      .from('usersinfriendsleague')
      .upsert([record]);

    if (error) {
      console.error('Error adding user to league:', error);
      throw error;
    }

    return data;
  }

}
